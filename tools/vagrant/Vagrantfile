# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'ffi'

Vagrant::Config.run do |config|
  config.vm.define :web do |web_config|
    # All Vagrant configuration is done here. The most common configuration
    # options are documented and commented below. For a complete reference,
    # please see the online documentation at vagrantup.com.

    # Every Vagrant virtual environment requires a box to build off of.
    web_config.vm.box = "Ubuntu-11.10"

    web_config.vm.customize [
        "modifyvm", :id,
        "--name", "Vagrant Tutorial Web",
        "--memory", "1024"
    ]

    # The url from where the 'config.vm.box' box will be fetched if it
    # doesn't already exist on the user's system.
    web_config.vm.box_url = "http://timhuegdon.com/vagrant-boxes/ubuntu-11.10.box"

    # Boot with a GUI so you can see the screen. (Default is headless)
    # config.vm.boot_mode = :gui

    # Assign this VM to a host-only network IP, allowing you to access it
    # via the IP. Host-only networks can talk to the host machine as well as
    # any other machines on the same network, but cannot be accessed (through this
    # network interface) by any external networks.
    web_config.vm.network :hostonly, "192.168.33.10"

    # Assign this VM to a bridged network, allowing you to connect directly to a
    # network using the host's network device. This makes the VM appear as another
    # physical device on your network.
    # config.vm.network :bridged

    # Forward a port from the guest to the host, which allows for outside
    # computers to access the VM, whereas host only networking does not.
    # config.vm.forward_port 80, 8080

    # Share an additional folder to the guest VM. The first argument is
    # an identifier, the second is the path on the guest to mount the
    # folder, and the third is the path on the host to the actual folder.
    web_config.vm.share_folder(
      "Sites",
      "/mnt/Sites",
      "#{ENV['HOME']}/Sites",
      :nfs => (FFI::Platform::IS_WINDOWS ? false: true)
    )

    # Enable provisioning with chef solo, specifying a cookbooks path, roles
    # path, and data_bags path (all relative to this Vagrantfile), and adding
    # some recipes and/or roles.
    #
    web_config.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = "./chef/cookbooks"
      chef.add_recipe("apt")
      chef.add_recipe("apache2")
      chef.add_recipe("mysql")
      chef.add_recipe("php")
      chef.add_recipe("project")
    end
  end

  config.vm.define :db do |db_config|
    # All Vagrant configuration is done here. The most common configuration
    # options are documented and commented below. For a complete reference,
    # please see the online documentation at vagrantup.com.

    # Every Vagrant virtual environment requires a box to build off of.
    db_config.vm.box = "Ubuntu-11.10"

    db_config.vm.customize [
        "modifyvm", :id,
        "--name", "Vagrant Tutorial DB",
        "--memory", "1024"
    ]

    # The url from where the 'config.vm.box' box will be fetched if it
    # doesn't already exist on the user's system.
    db_config.vm.box_url = "http://timhuegdon.com/vagrant-boxes/ubuntu-11.10.box"

    # Boot with a GUI so you can see the screen. (Default is headless)
    # config.vm.boot_mode = :gui

    # Assign this VM to a host-only network IP, allowing you to access it
    # via the IP. Host-only networks can talk to the host machine as well as
    # any other machines on the same network, but cannot be accessed (through this
    # network interface) by any external networks.
    db_config.vm.network :hostonly, "192.168.33.11"

    # Enable provisioning with chef solo, specifying a cookbooks path, roles
    # path, and data_bags path (all relative to this Vagrantfile), and adding
    # some recipes and/or roles.
    #
    db_config.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = "./chef/cookbooks"
      chef.add_recipe("apt")
      chef.add_recipe("mysql::server")

      # You may also specify custom JSON attributes:
      chef.json = {
        :mysql => {
          :server_root_password => "root"
        }
      }
    end
  end
end
